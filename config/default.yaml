# Joy Message Router Configuration
# This file defines profiles for routing joystick inputs to ROS messages

# Default profile to use when none is specified
default_profile: "teleop"

# Profile definitions
profiles:
  # Teleoperation profile for robot movement
  teleop:
    # Unified input mappings for both axes and buttons
    input_mappings:
      # Forward/backward movement (left stick Y-axis)
      - source_type: axis
        source_index: 1
        scale: 0.5              # Maximum output value (m/s for linear, rad/s for angular)
        offset: 0.0             # Offset added after scaling
        deadzone: 0.1           # Values below this threshold are treated as zero
        action:
          type: publish_twist_field
          field: linear_x       # Options: linear_x, linear_y, linear_z, angular_x, angular_y, angular_z
      
      # Rotation (right stick X-axis)
      - source_type: axis
        source_index: 3
        scale: 1.0
        offset: 0.0
        deadzone: 0.1
        action:
          type: publish_twist_field
          field: angular_z
    
      # X button - emergency stop (publishes zero twist)
      - source_type: button
        source_index: 0
        action:
          type: publish_twist_field
          field: linear_x
        scale: 0.0    # Zero output for emergency stop
        offset: 0.0
        deadzone: 0.0

  # Safe teleoperation with deadman switch
  teleop_safe:
    # L1 button (4) must be held to enable movement
    enable_button: 4
    
    input_mappings:
      # Same as teleop but with reduced speeds
      - source_type: axis
        source_index: 1
        scale: 0.3        # Reduced max speed for safety
        offset: 0.0
        deadzone: 0.1
        action:
          type: publish_twist_field
          field: linear_x
      
      - source_type: axis
        source_index: 3
        scale: 0.5        # Reduced rotation speed
        offset: 0.0
        deadzone: 0.1
        action:
          type: publish_twist_field
          field: angular_z
    
      # Triangle button - call service to change mode
      - source_type: button
        source_index: 2
        action:
          type: call_service
          service_name: "/set_navigation_mode"
          service_type: "std_srvs/srv/SetBool"
      
      # Circle button - trigger a custom action
      - source_type: button
        source_index: 1
        action:
          type: call_service
          service_name: "/trigger_action"
          service_type: "std_srvs/srv/Trigger"

  # Example profile with multiple output types
  multi_output:
    input_mappings:
      # Axis to twist field
      - source_type: axis
        source_index: 0
        scale: 1.0
        offset: 0.0
        deadzone: 0.05
        action:
          type: publish_twist_field
          field: linear_x
      
      # Button to boolean message
      - source_type: button
        source_index: 5
        action:
          type: publish_bool
          topic: "/lights/enable"
          value: true
          once: true    # Publish only on button press, not continuously
      
      # Button to integer message
      - source_type: button
        source_index: 6
        action:
          type: publish_int32
          topic: "/mode/select"
          value: 1
          once: true
      
      # Button to float message
      - source_type: button
        source_index: 7
        action:
          type: publish_float64
          topic: "/speed/multiplier"
          value: 2.0
          once: false   # Publish continuously while pressed
      
      # Button to string message
      - source_type: button
        source_index: 8
        action:
          type: publish_string
          topic: "/status/message"
          value: "Emergency Stop Activated"
          once: true